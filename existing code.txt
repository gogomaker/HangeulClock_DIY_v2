.
그저 단순히 필요한 코드들

//LED스위치 센싱 함수
int changeLedSW() {
	bool reading = digitalRead(LED_SW);
	if (reading != l_sw_stat[LED_INDEX]) {
		l_deb_tme[LED_INDEX] = time;
	}
	if ((time - l_deb_tme[LED_INDEX]) > DEB_DLY) {
		if (reading != sw_stat[LED_INDEX]) {
			sw_stat[LED_INDEX] = reading;
			if (sw_stat[LED_INDEX] == LOW) {
				//Serial.println("LED_pressed");
				sw_w[LED_INDEX] = time;
				sw_check[LED_INDEX] = true;
			}
			else {
				if (time < sw_w[LED_INDEX] + SW_INTERVAL) {
					bright += INCREASE_BRI;
					if (bright > MAX_BRI) bright = INCREASE_BRI;
					strip.setBrightness(bright);
					displayTime(hour, min);
					//Serial.print("change brightness: ");
					//Serial.println(bright);
					sw_check[LED_INDEX] = false;
				}
			}
		}
	}
	l_sw_stat[LED_INDEX] = reading;
}

//시간 스위치 센싱 함수
int changeTimeSW() {
	bool reading = digitalRead(TIME_SW);		// 버튼 상태 읽기
	if (reading != l_deb_tme[TME_INDEX]) {	// 버튼 바운싱 걸러냄
		l_deb_tme[TME_INDEX] = time;
	}
	if ((time - l_deb_tme[TME_INDEX]) > DEB_DLY) {	// 디바운스가 아닌 진짜 버튼 눌림이면
		if (reading != sw_stat[TME_INDEX]) {	//저장되 있는 버튼 값과 현재 버튼의 상태가 다르다면
			sw_stat[TME_INDEX] = reading;
			if (sw_stat[TME_INDEX] == LOW) {	//버튼이 눌렸다면
				//Serial.println("Time_pressed");
				sw_w[TME_INDEX] = time;
				sw_check[TME_INDEX] = true;
			}
			else {	//버튼이 때졌다면 / 버튼이 때 졌을 때를 기준으로 작동이 일어나기에 코드가 복잡함
				if (time < sw_w[TME_INDEX] + SW_INTERVAL) {		//short pressed
					if(isTchange == true) {	//readme 기능 파트 참조
						//Serial.println("hour plus");
						hourPlus++;
						if (hourPlus > 23) hourPlus = 0;
						hour = (hourRtc + hourPlus) % 24;
						displayTime(hour, min);
					}
					if(isAchange == true) {
						alarm_time[0]++;
						if(alarm_time[0] > 23) alarm_time[0] = 0;
					}
					sw_check[TME_INDEX] = false;
				}
			}
		}
	}
	l_sw_stat[TME_INDEX] = reading;
}


//알람 스위치 센싱 함수
int changeAlarmSW() {
	bool reading = digitalRead(ALARM_SW);		// 버튼 상태 읽기
	if (reading != l_deb_tme[ALM_INDEX]) {	// 버튼 바운싱 걸러냄
		l_deb_tme[ALM_INDEX] = time;
	}
	if ((time - l_deb_tme[ALM_INDEX]) > DEB_DLY) {	// 디바운스가 아닌 진짜 버튼 눌림이면
		if (reading != sw_stat[ALM_INDEX]) {	//저장되 있는 버튼 값과 현재 버튼의 상태가 다르다면
			sw_stat[ALM_INDEX] = reading;
			if (sw_stat[ALM_INDEX] == LOW) {	//버튼이 눌렸다면
				//Serial.println("Time_pressed");
				sw_w[ALM_INDEX] = time;
				sw_check[ALM_INDEX] = true;
			}
			else {	//버튼이 때졌다면 / 버튼이 때 졌을 때를 기준으로 작동이 일어나기에 코드가 복잡함
				if (time < sw_w[ALM_INDEX] + SW_INTERVAL) {		//short pressed
					if(isTchange == true) {	//readme 기능 파트 참조
						//Serial.println("hour plus");
						hourPlus++;
						if (hourPlus > 23) hourPlus = 0;
						hour = (hourRtc + hourPlus) % 24;
						displayTime(hour, min);
					}
					if(isAchange == true) {
						alarm_time[0]++;
					}
					sw_check[ALM_INDEX] = false;
				}
			}
		}
	}
	l_sw_stat[TME_INDEX] = reading;
}

void longTimeSW() {
	if (sw_check[TME_INDEX] == true) {
		if ((time - sw_w[TME_INDEX]) >= SW_INTERVAL) {
			if(isAchange == false) {	//알람 설정 모드가 아닐 경우에만
				if(isTchange == true) {
					isTchange = false;
					isblinkLED = true;
					ledclear();	//LED 소등
					blinkAllLED();
				}
				else {
					isTchange == true;
					blinkAllLED();
				}
			}
		}
	}
}

void longLedSW() {
	if (sw_check[LED_INDEX] == true) {
		if ((time - sw_w[LED_INDEX]) >= SW_INTERVAL) {
			//Serial.println("change color");
			ledmode++;
			if (ledmode > COLOR_CNT) ledmode = 0;
			if (ledmode > 0) {
				r = color[ledmode][0];
				g = color[ledmode][1];
				b = color[ledmode][2];
				w = color[ledmode][3];
			}
			displayTime(hour, min);
			sw_check[LED_INDEX] = false;
		}
	}
}

